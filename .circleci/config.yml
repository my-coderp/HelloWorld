# Java Maven CircleCI 2.0 configuration file
#
# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
#
version: 2.1
orbs:
  codecov: codecov/codecov@3.2.3

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/jobs-steps/#jobs-overview & https://circleci.com/docs/configuration-reference/#jobs
jobs:
  # at the end of each job the docker image is stop. Using the cache command stores the
  # dependency so it may be used in the next job

  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build:
    docker:
      # Primary container image where all steps run.
      - image: maven:3.8.5-openjdk-17
        environment:
          #customise the JVM maximum heap limit 3200m is max
          MAVEN_OPTS: -Xmx800m
          TEST_DATABASE_URL: mysql://mysql1@localhost/circle_test

        auth:
          username: aufgeber
          password: $DOCKER_PWD  # cthis env var must be set within the project
      # Secondary DB container image on common network for testing
      - image: mysql:latest
        environment:
          MYSQL_DATABASE: db
          MYSQL_PASSWORD: mySQLpwd
          MYSQL_ROOT_PASSWORD: verysecret
          MYSQL_USER: app
          ports:
            3306:3306
        auth:
          username: aufgeber
          password: $DOCKER_PWD  # cthis env var must be set within the project
    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: Install code and test
          command: mvn clean install

      - codecov/upload

      - run:
          name: Install MySQL CLI
          command: |
            sudo apt-get install default-mysql-client
            

      - run:
                # Using multiple Docker containers for your jobs may cause race conditions
                # if the service in a container does not start before the job tries to use it. use dockerize
          name: install dockerize
          command: |
            wget 
            https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-
            amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-
            $DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            environment:
              DOCKERIZE_VERSION: v0.6.1
                                   - run:
                                   name: Wait for db
                                   command: dockerize -wait tcp://localhost:3306 -timeout 1m


      - run:
          name: Import dummy data; run an example query
          command: |
            mysql -h 127.0.0.1 -u app -pmySQLpwd db < sql-data/dummy.sql
            mysql -h 127.0.0.1 -u app -pmySQLpwd --execute="SELECT * FROM test_version"

      

      - run:
          name: Build service
          command: make

  deploy:
    docker:
      # Primary container image where all steps run.
      - image: maven:3.8.5-openjdk-17
    steps:
      - run:
          name: Build image
          command: |
            docker build \
              --tag my-app:latest \
              --build-arg JAR_FILE=target/my-app.jar \

      - run:
          name: Login to GitHub Registry
          command: |
            echo "$GITHUB_PASSWORD" | docker login -u "$GITHUB_USERNAME" --password-stdin

      - run:
          name: Push Docker Image
          command: |
            docker tag my-image:latest my-registry/my-image:latest
            docker push my-registry/my-image:latest






# Orchestrate our job run sequence
workflows:
  version: 2

  build:
    jobs:
      - build

